jQuery(function($) {
    'use strict';
    
    const container = $('.mlcm-container');
    
    // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const cache = {
        containers: container,
        buttons: container.find('.mlcm-go-button'),
        selects: container.find('.mlcm-select')
    };
    
    // –î–µ–±–∞—É–Ω—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –ö–µ—à –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
    const ajaxCache = new Map();
    const CACHE_DURATION = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫–µ—à–∞
    function cleanExpiredCache() {
        const now = Date.now();
        for (let [key, value] of ajaxCache.entries()) {
            if (now - value.timestamp > CACHE_DURATION) {
                ajaxCache.delete(key);
            }
        }
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    cache.containers.each(function() {
        const $buttons = $(this).find('.mlcm-go-button');
        if ($buttons.length > 1) {
            $buttons.slice(1).remove();
        }
    });
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π
    cache.containers.each(function() {
        const $cont = $(this);
        const gap = parseInt($cont.css('gap')) || 20;
        const fontSize = $cont.css('font-size');
        
        $cont[0].style.setProperty('--mlcm-gap', `${gap}px`);
        $cont[0].style.setProperty('--mlcm-font-size', fontSize);
    });
    
    // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–µ–ª–µ–∫—Ç–∞—Ö —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
    cache.containers.on('change', '.mlcm-select', debounce(function() {
        const $select = $(this);
        const level = $select.data('level');
        const selectedOption = $select.find('option:selected');
        const parentId = selectedOption.val();
        const slug = selectedOption.data('slug');
        
        if (parentId === '-1') {
            resetLevels(level);
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º slug –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        $select.data('selected-slug', slug);
        
        // –£–õ–£–ß–®–ï–ù–û: –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∫ateg–æ—Ä–∏–π
        lazyLoadSubcategories($select, level, parentId);
    }, 150));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É
    cache.containers.on('click', '.mlcm-go-button', redirectToCategory);
    
    // –°–±—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
    function resetLevels(currentLevel) {
        cache.containers.find('.mlcm-select').each(function() {
            const $this = $(this);
            if ($this.data('level') > currentLevel) {
                $this.val('-1').prop('disabled', true).removeClass('mlcm-loading');
                $this.removeData('selected-slug');
                
                // –û—á–∏—â–∞–µ–º –æ–ø—Ü–∏–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
                $this.find('option:not(:first)').remove();
            }
        });
    }
    
    /**
     * –ù–û–í–û–ï: –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–∫ateg–æ—Ä–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    function lazyLoadSubcategories($select, level, parentId) {
        const maxLevels = cache.containers.data('levels');
        
        if (level >= maxLevels) {
            redirectToCategory();
            return;
        }
        
        const cacheKey = `mlcm_lazy_${parentId}`;
        
        // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫–µ—à–∞
        cleanExpiredCache();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if (ajaxCache.has(cacheKey)) {
            const cached = ajaxCache.get(cacheKey);
            if (Date.now() - cached.timestamp < CACHE_DURATION) {
                processSubcategories($select, level, cached.data);
                return;
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        $select.addClass('mlcm-loading');
        
        // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        $.ajax({
            url: mlcmVars.ajax_url,
            method: 'POST',
            data: {
                action: 'mlcm_get_subcategories',
                parent_id: parentId,
                security: mlcmVars.nonce
            },
            timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            beforeSend: () => {
                $select.nextAll('.mlcm-select').val('-1').prop('disabled', true);
            },
            success: (response) => {
                $select.removeClass('mlcm-loading');
                
                if (response.success) {
                    // –ö–µ—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                    ajaxCache.set(cacheKey, {
                        data: response.data,
                        timestamp: Date.now()
                    });
                    
                    processSubcategories($select, level, response.data);
                } else {
                    console.error('MLCM Ajax Error:', response.data);
                    showErrorState($select);
                }
            },
            error: (xhr, status, error) => {
                $select.removeClass('mlcm-loading');
                console.error('MLCM Ajax Error:', {xhr, status, error});
                showErrorState($select);
                
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
                if (xhr.status === 0 || xhr.status >= 500) {
                    setTimeout(() => {
                        if (confirm('Connection error. Retry loading subcategories?')) {
                            lazyLoadSubcategories($select, level, parentId);
                        }
                    }, 1000);
                }
            }
        });
    }
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏
    function showErrorState($select) {
        const level = $select.data('level');
        const nextLevel = level + 1;
        const $nextSelect = $(`.mlcm-select[data-level="${nextLevel}"]`);
        
        if ($nextSelect.length > 0) {
            $nextSelect.html(`
                <option value="-1">‚ö† Error loading categories</option>
                <option value="retry">üîÑ Click to retry</option>
            `).prop('disabled', false);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
            $nextSelect.off('change.retry').on('change.retry', function() {
                if ($(this).val() === 'retry') {
                    const parentId = $select.val();
                    if (parentId !== '-1') {
                        $(this).val('-1').prop('disabled', true);
                        lazyLoadSubcategories($select, level, parentId);
                    }
                }
            });
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫ateg–æ—Ä–∏–π
    function processSubcategories($select, level, categories) {
        if (Object.keys(categories).length > 0) {
            updateNextLevel($select, level, categories);
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫ateg–æ—Ä–∏–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            redirectToCategory();
        }
    }
    
    // –£–õ–£–ß–®–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    function updateNextLevel($select, currentLevel, categories) {
        const nextLevel = currentLevel + 1;
        const $nextSelect = $(`.mlcm-select[data-level="${nextLevel}"]`);
        
        if ($nextSelect.length === 0) {
            redirectToCategory();
            return;
        }
        
        if (Object.keys(categories).length > 0) {
            const label = mlcmVars.labels[nextLevel-1] || `Level ${nextLevel}`;
            
            // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            const sortedEntries = Object.entries(categories)
                .sort(([,a], [,b]) => {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Intl.Collator –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ Unicode
                    const collator = new Intl.Collator(undefined, { 
                        sensitivity: 'base',
                        numeric: true,
                        caseFirst: 'upper'
                    });
                    return collator.compare(a.name, b.name);
                });
            
            // –°–æ–∑–¥–∞–µ–º options –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —á–µ—Ä–µ–∑ DocumentFragment
            const fragment = document.createDocumentFragment();
            
            // –î–æ–±–∞–≤–ª—è–µ–º placeholder option
            const placeholderOption = document.createElement('option');
            placeholderOption.value = '-1';
            placeholderOption.textContent = label;
            fragment.appendChild(placeholderOption);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            sortedEntries.forEach(([id, data]) => {
                const option = document.createElement('option');
                option.value = id;
                option.setAttribute('data-slug', data.slug);
                option.setAttribute('data-url', data.url);
                option.textContent = data.name;
                fragment.appendChild(option);
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º select –æ–¥–Ω–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º
            $nextSelect[0].innerHTML = '';
            $nextSelect[0].appendChild(fragment);
            
            $nextSelect.prop('disabled', false).focus();
            
            // –î–û–ë–ê–í–õ–ï–ù–û: –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            $nextSelect.addClass('mlcm-loaded').removeClass('mlcm-loading');
                
        } else {
            redirectToCategory();
        }
    }
    
    // –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    function redirectToCategory() {
        const $lastSelect = cache.containers.find('.mlcm-select').filter(function() {
            return $(this).val() !== '-1';
        }).last();
        
        if ($lastSelect.length) {
            const selectedOption = $lastSelect.find('option:selected');
            const url = selectedOption.data('url');
            if (url) {
                // –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
                $lastSelect.addClass('mlcm-redirecting');
                window.location.href = url;
            }
        }
    }
    
    // –£–õ–£–ß–®–ï–ù–û: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    function handleMobileLayout() {
        const isMobile = window.matchMedia('(max-width: 768px)').matches;
        
        cache.containers.toggleClass('mobile-layout', isMobile);
        
        if (isMobile) {
            // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
            cache.containers.find('.mlcm-go-button').css({
                'width': '100%',
                'margin': '10px 0 0 0'
            });
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∫–∞—Å–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            cache.containers.find('.mlcm-select').css({
                'min-height': '44px',
                'font-size': 'clamp(14px, 4vw, 18px)'
            });
        }
    }
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ resize
    const debouncedResize = debounce(handleMobileLayout, 200);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    handleMobileLayout();
    $(window).on('resize', debouncedResize);
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
    $(window).on('beforeunload', function() {
        // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        cleanExpiredCache();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–µ—à–∞
        if (ajaxCache.size > 0) {
            sessionStorage.setItem('mlcm_cache_stats', JSON.stringify({
                size: ajaxCache.size,
                timestamp: Date.now()
            }));
        }
    });
    
    // –£–õ–£–ß–®–ï–ù–û: Accessibility —É–ª—É—á—à–µ–Ω–∏—è
    cache.selects.on('focus', function() {
        $(this).parent().addClass('mlcm-focused');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è screen readers
        const level = $(this).data('level');
        $(this).attr('aria-label', `Category selector level ${level}`);
    }).on('blur', function() {
        $(this).parent().removeClass('mlcm-focused');
    });
    
    // –î–û–ë–ê–í–õ–ï–ù–û: Keyboard navigation improvements
    cache.containers.on('keydown', '.mlcm-select', function(e) {
        const $this = $(this);
        
        if (e.key === 'Enter' && $this.val() !== '-1') {
            e.preventDefault();
            const level = $this.data('level');
            const parentId = $this.val();
            lazyLoadSubcategories($this, level, parentId);
        }
        
        // –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ —Å –ø–æ–º–æ—â—å—é Tab
        if (e.key === 'Tab') {
            const currentLevel = $this.data('level');
            const nextSelect = $(`.mlcm-select[data-level="${currentLevel + 1}"]`);
            
            if (nextSelect.length && !nextSelect.prop('disabled')) {
                e.preventDefault();
                nextSelect.focus();
            }
        }
    });
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    let progressIndicator = null;
    
    function showProgress(message = 'Loading...') {
        if (!progressIndicator) {
            progressIndicator = $(`
                <div class="mlcm-progress-indicator" style="
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background: rgba(0,0,0,0.8);
                    color: white;
                    padding: 15px 20px;
                    border-radius: 5px;
                    z-index: 10000;
                    font-size: 14px;
                ">
                    <div class="spinner" style="
                        width: 20px;
                        height: 20px;
                        border: 2px solid #fff;
                        border-top: 2px solid transparent;
                        border-radius: 50%;
                        animation: spin 1s linear infinite;
                        display: inline-block;
                        margin-right: 10px;
                    "></div>
                    <span>${message}</span>
                </div>
            `);
            $('body').append(progressIndicator);
        }
    }
    
    function hideProgress() {
        if (progressIndicator) {
            progressIndicator.remove();
            progressIndicator = null;
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
    let progressTimeout;
    $(document).ajaxStart(function() {
        progressTimeout = setTimeout(() => showProgress('Loading categories...'), 1000);
    }).ajaxStop(function() {
        clearTimeout(progressTimeout);
        hideProgress();
    });
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
    $(window).on('online', function() {
        // –û—á–∏—â–∞–µ–º –∫–µ—à –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        ajaxCache.clear();
        cache.containers.find('.mlcm-select[data-level="1"]').trigger('change');
    });
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (typeof console !== 'undefined' && console.time) {
        console.time('MLCM Frontend Init');
        $(window).on('load', function() {
            console.timeEnd('MLCM Frontend Init');
            console.log('MLCM: Frontend initialized successfully');
        });
    }
});